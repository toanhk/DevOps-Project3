version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Destroy udapeople backend cfn stack
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
          environment:
            TERM: xterm-256color
          when: << parameters.when >>
      - run:
          name: Destroy udapeople frontend cfn stack and S3 bucket
          command: |
            aws s3 rm s3://udapeople-<< parameters.id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
          environment:
              TERM: xterm-256color
          when: << parameters.when >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
            #  exit 1

      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: run font-end test
          command: |
            cd backend
            npm install
            npm run test

      - save_cache:
          paths: [fontend/node_modules]
          key: fontend-test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: run back-end test
          command: |
            cd backend
            npm install
            npm run test

      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: run font-end scan
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

      - save_cache:
          paths: [fontend/node_modules]
          key: fontend-scan

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: run back-end scan
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Deploy backend infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Deploy frontend infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add backend ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
              echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
              cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            # - project/.circleci/ansible/backendip.txt
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
 

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["56:45:6c:95:54:e6:99:3e:e3:e8:53:3b:7c:22:3d:8d"] # You can get this ID in the section where you registered the SSH Key
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add tar
            apk add gzip
            apk add openssh-client
            apk add curl
            pip install awscli
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            echo $PWD
            cat ~/.circleci/ansible/inventory.txt
            cd ~/.circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  # run-migrations:
  #   docker:
  #     # Docker image here that supports NodeJS
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Run migrations
  #         command: |
  #           # Your code here
  #           exit 1
  #     - run:
  #         name: Send migration results to memstash
  #         command: |
  #           # Your code here
  #           exit 1
  #    # Here's where you will add some code to rollback on failure      

  # deploy-frontend:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo "${API_URL}"
  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure      
                    
  # deploy-backend:
  #   docker:
  #     # Docker image here that supports Ansible
  #   steps:
  #     # Checkout code from git
  #     # Add ssh keys with fingerprint
  #     # attach workspace
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

  # smoke-test:
  #   docker:
  #     # Lightweight Docker image 
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           # your code here
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

  # cloudfront-update:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]

      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: 
                - circleci-project-setup

      - configure-infrastructure:
          requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]