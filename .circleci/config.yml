version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      id:
        type: string
    steps:
      - run:
          name: Destroy frontend
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
      - run:
          name: Destroy backend
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          working_directory: ./backend
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_<< parameters.id >>)
            echo $SUCCESS
            if (( $SUCCESS == 1 ));
            then
                # cd ~/project/backend
                npm install
                npm run migration:revert
            fi  
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
            #  exit 1

      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: run font-end test
          command: |
            cd backend
            npm install
            npm run test

      - save_cache:
          paths: [fontend/node_modules]
          key: fontend-test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: run back-end test
          command: |
            cd backend
            npm install
            npm run test

      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: run font-end scan
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

      - save_cache:
          paths: [fontend/node_modules]
          key: fontend-scan

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: run back-end scan
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Deploy backend infrastructure
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Deploy frontend infrastructure
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add backend ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> inventory
            cat inventory
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
 

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["56:45:6c:95:54:e6:99:3e:e3:e8:53:3b:7c:22:3d:8d"] 
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            pwd &&
            ls -la
            cat inventory
            ansible-playbook -i inventory configure-server.yml
      
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: .
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." migrations_dump.txt
            then
              curl https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
  
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies Node
          command: |
            curl -sL https://rpm.nodesource.com/setup_13.x | bash -
            yum -y install nodejs
            node -v
      - run:
          name: Install dependencies tar
          command: |
            yum -y install tar
      - run:
          name: Install dependencies gzip
          command: |
            yum -y install gzip
      - run:
          name: Set env variables
          command: |
            # your code here also added filters
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Build frontend objects
          command: |
            npm install webpack-dev-server -g
            cd frontend
            npm i
            npm run build
            npm audit fix --force --audit-level=critical
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 sync frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: cimg/python:3.10.6

    steps:
      - checkout
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: .
      - add_ssh_keys:
          fingerprints:
            - "56:45:6c:95:54:e6:99:3e:e3:e8:53:3b:7c:22:3d:8d"
      
      - run:
          name: Install dependencies
          command: |
            python3 -m pip install --user ansible
            sudo apt update
            sudo apt install nodejs
            sudo apt install npm
      - run:
          name: Add env vars to env file
          command: |
            echo "NODE_ENV=production" >> backend/.env
            echo "VERSION=1" >> backend/.env
            echo "TYPEORM_CONNECTION=${TYPEORM_CONNECTION}" >> backend/.env
            echo "TYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR}" >> backend/.env
            echo "TYPEORM_ENTITIES=${TYPEORM_ENTITIES}" >> backend/.env
            echo "TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}" >> backend/.env
            echo "TYPEORM_HOST=${TYPEORM_HOST}" >> backend/.env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> backend/.env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> backend/.env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> backend/.env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> backend/.env  
      - run:
          name: Deploy backend and run ansible
          command: |
            cd backend
            npm i
            npm run build
            ls
            pwd
            cd .. 
            tar -C backend -czvf artifact.tar.gz .

            ansible-playbook -i inventory .circleci/ansible/deploy-backend.yml
            sleep 30s
            
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Get backend url and smoke test
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
                              --filters Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                              --query 'Reservations[*].Instances[*].PublicIpAddress' \
                              --output text)
            echo "${BACKEND_IP}"
            if curl "http://${BACKEND_IP}:3030/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Save Old Workflow ID to kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
            echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
            curl https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/old_workflow_id -d "${OLD_WORKFLOW_ID}"
      - run:
          name: Update cloudfront distribution
          command: |
            echo ${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name udapeople-cloudfont 
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          
  cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
           
            export OldWorkflowID=$(curl --insecure https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/old_workflow_id)
            echo  OldWorkflowID:  "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names= "${STACKS[@]}"

            if [ -z "$var" ]
            then
              echo "nothing to clean up........."
            else
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                # your code here
                echo "cleaning up ............."
                echo bucket= "s3://udapeople-${OldWorkflowID}"
                aws s3 rb "s3://udapeople-${OldWorkflowID}" --force
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              else
                echo "nothing to clean up........."
              fi
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]

      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: 
                - circleci-project-setup

      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]