version: 2.1
# orbs: 
#   slack: circleci/slack@4.5.1
  
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here  
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name back-end-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name front-end-${CIRCLE_WORKFLOW_ID:0:7}
            #exit 1
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
      # Add parameter here
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/Nucr3yB6RM75Sz5neM8QEo/migration_<< parameters.workflow_id >>)
            echo $SUCCESS
            if (( $SUCCESS == 1 ));
            then
                # cd ~/project/backend
                npm install
                npm run migration:revert
            fi 
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install 
            npm run build
            #exit 1
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm install 
            npm run build
            #exit 1
      - persist_to_workspace:
            root: .
            paths: [backend/node_modules]
      - persist_to_workspace:
              root: .
              paths: [backend/dist]
      - save_cache:
              paths: [backend/node_modules]
              key: v5-backend-build
      - save_cache:
              paths: [backend/dist]
              key: v4-backend-dist  

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-test]
      # Your job code here
      - run:
          name: frontend-test
          command:  |
            cd frontend
            npm install 
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test  

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-test]
      # Your job code here
      - run:
          name: backend-test
          command:  |
            cd backend
            npm install 
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test         
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git test
      - checkout
      # Restore from cache
      #- restore_cache:
      #    keys: [scan-frontend]
      # Your job code here
      - run:
          name: scan-frontend
          command:  |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [fontend/node_modules]
          key: fontend-scan

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: scan-backend
          command:  |
            cd backend
            npm install
            npm audit fix
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
            
      - save_cache:
         paths: [backend/node_modules]
         key: scan-backend
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            cat .circleci/ansible/inventory.txt
            ls ~/project/.circleci/ansible/
            cat ~/project/.circleci/ansible/inventory.txt
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=Udacity-Project3 \
              --stack-name "back-end-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              #exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=Udacity-Project3 \
              --stack-name "front-end-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              #exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible
            backendip=$(aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --filters "Name=tag:project,Values=Udacity-Project3" \
              --output=text)
            echo $backendip >> inventory.txt
            cat inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt     
  
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
              - "56:45:6c:95:54:e6:99:3e:e3:e8:53:3b:7c:22:3d:8d"
      # attach workspace
      - attach_workspace:
            at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Set up inventory file
          command: |
            cd .circleci/ansible
            echo "$URLS" >> inventory.txt
            cat inventory.txt
      - run:
          name: Configure server with ansible
          no_output_timeout: 30m
          command: |
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure  

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: install awscli
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -qq install awscli
            sudo apt-get -y -qq install python3
            sudo npm install pm2 -g
      
      - run:
          name: Run migrations
          no_output_timeout: 10m
          command: |
            cd backend
            npm install
            npm run migrations > mig_results.txt
            cat mig_results.txt
      - run:
          name: save migrations
          command: |
            echo ${CIRCLE_WORKFLOW_ID:0:7}
            cd backend
            if grep "has been executed successfully" mig_results.txt
            then
              echo "DB migration was successful"
            else
              echo "DB migration has failed"
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    # docker:
    #   - image: amazon/aws-cli
    # steps:
    #   - checkout
    #   - run:
    #       name: Install dependencies
    #       command: |
    #         yum -y install tar gzip 
    #         curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
    #         yum -y install nodejs 
    #         echo ENVIRONMENT=production  >> "frontend/.env" 
    #         echo NODE_ENV=production >> "frontend/.env"
    #         cat "frontend/.env"
    #   - attach_workspace:
    #       at: ~/

    #   - run:
    #       name: Get backend url
    #       command: |
    #         # your code here
    #         ls -l ~/
    #         export BACKEND_IP=$(aws ec2 describe-instances \
    #           --query "Reservations[*].Instances[*].PublicIpAddress" \
    #           --filters "Name=tag:project,Values=Udacity-Project3" \
    #           --output=text)
            
    #         export API_URL="http://${BACKEND_IP}:3030"
    #         echo "${API_URL}"    
    #         echo API_URL=$API_URL >> "frontend/.env"
    #         echo ENVIRONMENT=production  >> "frontend/.env" 
    #         echo NODE_ENV=production >> "frontend/.env"
    #         cat "frontend/.env"
       
    #   - run:
    #       name: Deploy frontend objects
    #       command: |
    #         # your code here
    #         cd frontend
    #         npm install
    #         npm run build
    #         tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
    #         aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
    #   - revert-migrations:
    #       workflow_id: ${CIRCLE_WORKFLOW_ID}
    #   - destroy-environment:
    #       workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies Node
          command: |
            curl -sL https://rpm.nodesource.com/setup_13.x | bash -
            yum -y install nodejs
            node -v
      - run:
          name: Install dependencies tar
          command: |
            yum -y install tar
      - run:
          name: Install dependencies gzip
          command: |
            yum -y install gzip
      - run:
          name: Set env variables
          command: |
            # your code here also added filters
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Build frontend objects
          command: |
            npm install webpack-dev-server -g
            cd frontend
            npm i
            npm run build
            npm audit fix --force --audit-level=critical
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 sync frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
              - "56:45:6c:95:54:e6:99:3e:e3:e8:53:3b:7c:22:3d:8d"
      # attach workspace
      - attach_workspace:
            at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl zip
            pip install awscli
            npm install
            
      - run:
          name: create .env files
          command: |
            echo NODE_ENV=production > "backend/.env"
            echo VERSION=1 >> "backend/.env"
            echo ENVIROMENT=development >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
      - run:
          name: install node modules
          command: |
            cd /root/project/backend
            npm install
      - run:
          name: zip backend files
          command: |
            pwd
            cd backend
            npm i
            npm run build
            cd ..
            pwd
            tar czf backend.tar.gz backend
            ls -l 
            cd .circleci/ansible/roles/deploy
            mkdir files
            #sudo chmod 777 files
            cd /root/project/
            cp backend.tar.gz .circleci/ansible/roles/deploy/files/
            ls -l
            #mv backend.tar.gz /home/ubuntu
            #cd /home/ubuntu
            #ls -l
            #cp backend.tar.gz /home/ubuntu
            #cp backend.tar.gz ~/
      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible
            backendip=$(aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --filters "Name=tag:project,Values=Udacity-Project3" \
              --output=text)
            ls -l -a
            #echo $backendip >> .circleci/ansible/inventory.txt
            echo $backendip >> inventory.txt
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            #yum -y install tar gzip
            apk add --update tar gzip ansible nodejs npm curl zip
            pip install awscli
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_URL=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=Udacity-Project3" --output text)
            echo https://${BACKEND_URL}:3030/api/status
            # if 
            # curl -s https://${BACKEND_URL}:3030/api/status | grep "ok"
            # then
            #   exit 0
            # else
            #   exit 1
            # fi  
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            #http://udapeople-595df6d.s3.amazonaws.com/index.html#/employees
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"            
            echo ${URL} 
            # if curl -s ${URL} | grep "Welcome"
            # then
            #     # Change this to 0 after the job fails
            #   return 0
            # else
            #   return 1
            # fi
      # Here's where you will add some code to rollback on failure  
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip 
      - attach_workspace:
            at: ~/
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip 
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs 
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            # Change the initial stack name, as applicable to you
            export oldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --region us-west-2 --no-paginate --output text)
            echo $oldWorkflowID >> oldWorkflowID.txt
            echo "oldWorkflowID is -------"
            cat oldWorkflowID.txt
            echo Current workflow ID ${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name Udacity-Project3-Cloudfront \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      # Here's where you will add some code to rollback on failure  
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  cleanup:
      docker:
        # Docker image here that supports AWS CLI
        - image: amazon/aws-cli
      steps:
        # Checkout code from git
        - checkout
        - run:
            name: Install dependencies
            command: |
              yum -y install tar gzip 
        - attach_workspace:
              at: ~/
        - run:
            name: Get old stack workflow id
            command: |
              # your code here will get all stack names including the new one
              export OldWorkflowID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
              echo OldWorkflowID: "${OldWorkflowID}"
              #put the list of stacks here
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                      --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
              echo ${STACKS[@]}
              for stack in ${STACKS[@]}; do
                  if [[ $stack == *"${CIRCLE_WORKFLOW_ID:0:7}"* ]]
                    then
                      echo "New Stack Don't delete!"
                      echo "$stack"
                    else
                      if [[ "$stack" == *"-end-"* ]]; then
                        echo "Old Stack to be deleted"
                        echo "$stack"
                        export OldWorkflowID=${stack##*-}
                        echo $OldWorkflowID
                        aws cloudformation delete-stack --stack-name "back-end-${OldWorkflowID}"
                        aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                        aws cloudformation delete-stack --stack-name "front-end-${OldWorkflowID}"
                      fi
                  fi
              done
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]

      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: 
                - circleci-project-setup

      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]